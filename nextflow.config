// Global default params, used in configs
params {
    // Input options
    input                        = null

    // Spaceranger options
    spaceranger_reference        = "https://cf.10xgenomics.com/supp/spatial-exp/refdata-gex-GRCh38-2020-A.tar.gz"
    spaceranger_probeset         = null

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    help                         = false
    version                      = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                   = '128.GB'
    max_cpus                     = 64
    max_time                     = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Default analysis parameters
includeConfig 'conf/analysis.config'

// Configurations for modules
includeConfig 'conf/modules.config'

profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        podman.enabled         = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        conda.enabled          = false
        podman.enabled         = false
    }
    podman {
        podman.enabled         = true
        conda.enabled          = false
        docker.enabled         = false
    }
    test { includeConfig 'conf/test.config'      }
    test_spaceranger_ffpe_cytassist { includeConfig 'conf/test_spaceranger_ffpe_cytassist.config' }
    test_spaceranger_ffpe_v1 { includeConfig 'conf/test_spaceranger_ffpe_v1.config' }
    test_full { includeConfig 'conf/test_full.config' }
}

// Set default registry for Docker, Podman
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation'  // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
